// Autogenerated by convert_tests.py and process_polyglot.py.
// Do not edit this file directly.
// The template for this file is located at:
// ../../../../../../../templates/Test.java
package com.rethinkdb.gen;

import com.rethinkdb.RethinkDB;
import com.rethinkdb.model.OptArgs;
import com.rethinkdb.net.Connection;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.junit.*;

import java.util.ArrayList;
import java.util.List;

import static com.rethinkdb.TestingCommon.*;
import com.rethinkdb.TestingFramework;

public class MathLogicBit {
    // Tests bitwise operators
    Logger logger = LoggerFactory.getLogger(MathLogicBit.class);
    public static final RethinkDB r = RethinkDB.r;

    Connection conn;

    @Before
    public void setUp() throws Exception {
        logger.info("Setting up.");
        conn = TestingFramework.createConnection();
        try {
            r.dbCreate("test").run(conn);
            r.db("test").wait_().run(conn);
        }catch (Exception e){}
    }

    @After
    public void tearDown() throws Exception {
        logger.info("Tearing down.");
        r.db("rethinkdb").table("_debug_scratch").delete().run(conn);
        if(!conn.isOpen()){
            conn.close();
            conn = TestingFramework.createConnection();
        }
        r.dbDrop("test").run(conn);
        conn.close(false);
    }

    // Matches Python's str() function, which we use.
    // TODO: We might want to handle this in a visit_Call in convert_tests.py instead.
    private static String str(long i) {
        return String.valueOf(i);
    }

    // A hack to concatenate two Lists -- see is_array_add in convert_tests.py.
    private static List concatList(List x, List y) {
        List ret = new ArrayList<Long>(x);
        ret.addAll(y);
        return ret;
    }

    // Autogenerated tests below

    @Test(timeout=120000)
    public void test() throws Exception {

        {
            // math_logic/bit.yaml line #4
            /* 2 */
            Long expected_ = 2L;
            /* r.expr(3).bit_and(2) */
            logger.info("About to run line #4: r.expr(3L).bitAnd(2L)");
            Object obtained = runOrCatch(r.expr(3L).bitAnd(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #4");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #4:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #7
            /* 2 */
            Long expected_ = 2L;
            /* r.expr(-2).bit_and(3) */
            logger.info("About to run line #7: r.expr(-2L).bitAnd(3L)");
            Object obtained = runOrCatch(r.expr(-2L).bitAnd(3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #7");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #7:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #10
            /* err('ReqlQueryLogicError', 'Integer too large: 9007199254740992') */
            Err expected_ = err("ReqlQueryLogicError", "Integer too large: 9007199254740992");
            /* r.expr(9007199254740992).bit_and(0) */
            logger.info("About to run line #10: r.expr(9007199254740992L).bitAnd(0L)");
            Object obtained = runOrCatch(r.expr(9007199254740992L).bitAnd(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #10");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #10:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #13
            /* err('ReqlQueryLogicError', 'Number not an integer (>2^53): 9007199254740994') */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer (>2^53): 9007199254740994");
            /* r.expr(9007199254740994).bit_and(0) */
            logger.info("About to run line #13: r.expr(9007199254740994L).bitAnd(0L)");
            Object obtained = runOrCatch(r.expr(9007199254740994L).bitAnd(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #13");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #13:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #16
            /* 23 */
            Long expected_ = 23L;
            /* r.expr(9007199254740991).bit_and(23) */
            logger.info("About to run line #16: r.expr(9007199254740991L).bitAnd(23L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitAnd(23L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #16");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #16:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #19
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(-9007199254740992).bit_and(12345) */
            logger.info("About to run line #19: r.expr(-9007199254740992L).bitAnd(12345L)");
            Object obtained = runOrCatch(r.expr(-9007199254740992L).bitAnd(12345L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #19");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #19:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #22
            /* 3 */
            Long expected_ = 3L;
            /* r.expr(1).bit_or(2) */
            logger.info("About to run line #22: r.expr(1L).bitOr(2L)");
            Object obtained = runOrCatch(r.expr(1L).bitOr(2L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #22");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #22:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #25
            /* err('ReqlQueryLogicError', 'Integer too large: 9007199254740992') */
            Err expected_ = err("ReqlQueryLogicError", "Integer too large: 9007199254740992");
            /* r.expr(9007199254740992).bit_or(0) */
            logger.info("About to run line #25: r.expr(9007199254740992L).bitOr(0L)");
            Object obtained = runOrCatch(r.expr(9007199254740992L).bitOr(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #25");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #25:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #28
            /* 9007199254740991 */
            Long expected_ = 9007199254740991L;
            /* r.expr(9007199254740991).bit_or(0) */
            logger.info("About to run line #28: r.expr(9007199254740991L).bitOr(0L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitOr(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #28");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #28:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #31
            /* -1 */
            Long expected_ = -1L;
            /* r.expr(9007199254740991).bit_or(-1) */
            logger.info("About to run line #31: r.expr(9007199254740991L).bitOr(-1L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitOr(-1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #31");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #31:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #34
            /* 5 */
            Long expected_ = 5L;
            /* r.expr(3).bit_xor(6) */
            logger.info("About to run line #34: r.expr(3L).bitXor(6L)");
            Object obtained = runOrCatch(r.expr(3L).bitXor(6L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #34");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #34:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #37
            /* -3 */
            Long expected_ = -3L;
            /* r.expr(2).bit_not() */
            logger.info("About to run line #37: r.expr(2L).bitNot()");
            Object obtained = runOrCatch(r.expr(2L).bitNot(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #37");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #37:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #40
            /* -9007199254740992 */
            Long expected_ = -9007199254740992L;
            /* r.expr(9007199254740991).bit_not() */
            logger.info("About to run line #40: r.expr(9007199254740991L).bitNot()");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitNot(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #40");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #40:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #43
            /* 9007199254740991 */
            Long expected_ = 9007199254740991L;
            /* r.expr(9007199254740991).bit_not().bit_not() */
            logger.info("About to run line #43: r.expr(9007199254740991L).bitNot().bitNot()");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitNot().bitNot(),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #43");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #43:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #47
            /* err('ReqlQueryLogicError', 'Integer too large: 9007199254740992') */
            Err expected_ = err("ReqlQueryLogicError", "Integer too large: 9007199254740992");
            /* r.expr(9007199254740992).bit_sar(0) */
            logger.info("About to run line #47: r.expr(9007199254740992L).bitSar(0L)");
            Object obtained = runOrCatch(r.expr(9007199254740992L).bitSar(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #47");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #47:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #50
            /* -9007199254740992 */
            Long expected_ = -9007199254740992L;
            /* r.expr(-9007199254740992).bit_sar(0) */
            logger.info("About to run line #50: r.expr(-9007199254740992L).bitSar(0L)");
            Object obtained = runOrCatch(r.expr(-9007199254740992L).bitSar(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #50");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #50:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #53
            /* -4503599627370496 */
            Long expected_ = -4503599627370496L;
            /* r.expr(-9007199254740992).bit_sar(1) */
            logger.info("About to run line #53: r.expr(-9007199254740992L).bitSar(1L)");
            Object obtained = runOrCatch(r.expr(-9007199254740992L).bitSar(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #53");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #53:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #56
            /* -2 */
            Long expected_ = -2L;
            /* r.expr(-9007199254740992).bit_sar(52) */
            logger.info("About to run line #56: r.expr(-9007199254740992L).bitSar(52L)");
            Object obtained = runOrCatch(r.expr(-9007199254740992L).bitSar(52L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #56");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #56:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #59
            /* -1 */
            Long expected_ = -1L;
            /* r.expr(-9007199254740992).bit_sar(53) */
            logger.info("About to run line #59: r.expr(-9007199254740992L).bitSar(53L)");
            Object obtained = runOrCatch(r.expr(-9007199254740992L).bitSar(53L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #59");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #59:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #62
            /* -1 */
            Long expected_ = -1L;
            /* r.expr(-9007199254740992).bit_sar(54) */
            logger.info("About to run line #62: r.expr(-9007199254740992L).bitSar(54L)");
            Object obtained = runOrCatch(r.expr(-9007199254740992L).bitSar(54L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #62");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #62:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #65
            /* 9007199254740991 */
            Long expected_ = 9007199254740991L;
            /* r.expr(9007199254740991).bit_sar(0) */
            logger.info("About to run line #65: r.expr(9007199254740991L).bitSar(0L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitSar(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #65");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #65:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #68
            /* 4503599627370495 */
            Long expected_ = 4503599627370495L;
            /* r.expr(9007199254740991).bit_sar(1) */
            logger.info("About to run line #68: r.expr(9007199254740991L).bitSar(1L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitSar(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #68");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #68:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #71
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(9007199254740991).bit_sar(52) */
            logger.info("About to run line #71: r.expr(9007199254740991L).bitSar(52L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitSar(52L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #71");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #71:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #74
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(9007199254740991).bit_sar(53) */
            logger.info("About to run line #74: r.expr(9007199254740991L).bitSar(53L)");
            Object obtained = runOrCatch(r.expr(9007199254740991L).bitSar(53L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #74");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #74:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #78
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(0).bit_sal(999999) */
            logger.info("About to run line #78: r.expr(0L).bitSal(999999L)");
            Object obtained = runOrCatch(r.expr(0L).bitSal(999999L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #78");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #78:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #81
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(0).bit_sal(3000) */
            logger.info("About to run line #81: r.expr(0L).bitSal(3000L)");
            Object obtained = runOrCatch(r.expr(0L).bitSal(3000L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #81");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #81:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #84
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(0).bit_sal(500) */
            logger.info("About to run line #84: r.expr(0L).bitSal(500L)");
            Object obtained = runOrCatch(r.expr(0L).bitSal(500L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #84");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #84:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #87
            /* 0 */
            Long expected_ = 0L;
            /* r.expr(0).bit_sal(0) */
            logger.info("About to run line #87: r.expr(0L).bitSal(0L)");
            Object obtained = runOrCatch(r.expr(0L).bitSal(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #87");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #87:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #90
            /* 1 */
            Long expected_ = 1L;
            /* r.expr(1).bit_sal(0) */
            logger.info("About to run line #90: r.expr(1L).bitSal(0L)");
            Object obtained = runOrCatch(r.expr(1L).bitSal(0L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #90");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #90:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #93
            /* 2 */
            Long expected_ = 2L;
            /* r.expr(1).bit_sal(1) */
            logger.info("About to run line #93: r.expr(1L).bitSal(1L)");
            Object obtained = runOrCatch(r.expr(1L).bitSal(1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #93");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #93:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #96
            /* 8 */
            Long expected_ = 8L;
            /* r.expr(1).bit_sal(3) */
            logger.info("About to run line #96: r.expr(1L).bitSal(3L)");
            Object obtained = runOrCatch(r.expr(1L).bitSal(3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #96");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #96:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #99
            /* -8 */
            Long expected_ = -8L;
            /* r.expr(-1).bit_sal(3) */
            logger.info("About to run line #99: r.expr(-1L).bitSal(3L)");
            Object obtained = runOrCatch(r.expr(-1L).bitSal(3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #99");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #99:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #102
            /* -18014398509481984 */
            Long expected_ = -18014398509481984L;
            /* r.expr(-1).bit_sal(54) */
            logger.info("About to run line #102: r.expr(-1L).bitSal(54L)");
            Object obtained = runOrCatch(r.expr(-1L).bitSal(54L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #102");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #102:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #105
            /* 18014398509481984 */
            Long expected_ = 18014398509481984L;
            /* r.expr(1).bit_sal(54) */
            logger.info("About to run line #105: r.expr(1L).bitSal(54L)");
            Object obtained = runOrCatch(r.expr(1L).bitSal(54L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #105");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #105:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #108
            /* -18014398509481984 */
            Long expected_ = -18014398509481984L;
            /* r.expr(-2).bit_sal(53) */
            logger.info("About to run line #108: r.expr(-2L).bitSal(53L)");
            Object obtained = runOrCatch(r.expr(-2L).bitSal(53L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #108");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #108:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #111
            /* 18014398509481984 */
            Long expected_ = 18014398509481984L;
            /* r.expr(2).bit_sal(53) */
            logger.info("About to run line #111: r.expr(2L).bitSal(53L)");
            Object obtained = runOrCatch(r.expr(2L).bitSal(53L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #111");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #111:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #114
            /* err('ReqlQueryLogicError', 'Cannot bit-shift by a negative value') */
            Err expected_ = err("ReqlQueryLogicError", "Cannot bit-shift by a negative value");
            /* r.expr(5).bit_sal(-1) */
            logger.info("About to run line #114: r.expr(5L).bitSal(-1L)");
            Object obtained = runOrCatch(r.expr(5L).bitSal(-1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #114");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #114:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #117
            /* err('ReqlQueryLogicError', 'Cannot bit-shift by a negative value') */
            Err expected_ = err("ReqlQueryLogicError", "Cannot bit-shift by a negative value");
            /* r.expr(5).bit_sar(-1) */
            logger.info("About to run line #117: r.expr(5L).bitSar(-1L)");
            Object obtained = runOrCatch(r.expr(5L).bitSar(-1L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #117");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #117:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #121
            /* err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [0]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(0L));
            /* r.expr('a').bit_and(12) */
            logger.info("About to run line #121: r.expr('a').bitAnd(12L)");
            Object obtained = runOrCatch(r.expr("a").bitAnd(12L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #121");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #121:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #124
            /* err('ReqlQueryLogicError', 'Expected type NUMBER but found STRING.', [1]) */
            Err expected_ = err("ReqlQueryLogicError", "Expected type NUMBER but found STRING.", r.array(1L));
            /* r.expr(12).bit_and('a') */
            logger.info("About to run line #124: r.expr(12L).bitAnd('a')");
            Object obtained = runOrCatch(r.expr(12L).bitAnd("a"),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #124");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #124:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }

        {
            // math_logic/bit.yaml line #127
            /* err('ReqlQueryLogicError', 'Number not an integer: 1.5') */
            Err expected_ = err("ReqlQueryLogicError", "Number not an integer: 1.5");
            /* r.expr(1.5).bit_and(3) */
            logger.info("About to run line #127: r.expr(1.5).bitAnd(3L)");
            Object obtained = runOrCatch(r.expr(1.5).bitAnd(3L),
                                          new OptArgs()
                                          ,conn);
            try {
                assertEquals(expected_, obtained);
            logger.info("Finished running line #127");
            } catch (Throwable ae) {
                logger.error("Whoops, got exception on line #127:" + ae.toString());
                if(obtained instanceof Throwable) {
                    ae.addSuppressed((Throwable) obtained);
                }
                throw ae;
            }
        }
    }
}
